scores %>%
dplyr::filter(Stu_ID>=10101 & Stu_ID<=10120 & gender='F' & English >=80)
scores %>%
dplyr::filter(Stu_ID>=10101 & Stu_ID<=10120 & gender='F' & English >=80)
scores %>%
dplyr::filter(Stu_ID >= 10101 & Stu_ID <= 10120 & gender == 'F' & English >=80)
scores %>%
dplyr::filter((Stu_ID%%2 != 0) & gender == 'M' & Math >= 90 & Science >= 90)
scores %>%
dplyr::filter(Math == 100 | English == 100 | Science == 100 | Marketing == 100 | Writing == 100)
scores %>%
dplyr::filter(Math == 0 | English == 0 | Science == 0 | Marketing == 0 | Writing == 0)
scores %>%
dplyr::filter(Math == 0 | English == 0 | Science == 0 | Marketing == 0 | Writing == 0)
scores %>%
dplyr::mutate(Average = (Math+English+Science+Marketing+Writing)%/%5)
scores_avg <- data.frame(
scores %>%
dplyr::mutate(Average = (Math+English+Science+Marketing+Writing)%/%5)
)
scores_avg
scores <- scores %>%
dplyr::mutate(Average = (Math+English+Science+Marketing+Writing)%/%5)
View(scores)
scores_avg
scores <- scores %>%
dplyr::mutate(Rank = dense_rank(desc(Average)))
View(scores)
scores %>%
dplyr::arrange(Rank) %>%
scores %>%
dplyr::arrange(Rank) %>%
scores %>%
dplyr::arrange(Rank) %>%
slice(1:10)
scores %>%
dplyr::arrange(Rank) %>%
slice(1:10)
scores <- scores %>%
dplyr::mutate(Score = ifelse(Average >= 90, 'A', ifelse(Average >= 80, 'B', ifelse(Average >= 70, 'C', ifelse(Average >= 60, 'D', ifelse(Average >= 50, 'E', 'F'))))))
View(scores)
scores %>%
dplyr::group_by(grade) %>%
dplyr::summarise(Count = length(grade))
scores %>%
dplyr::dense_rank(desc(Average))
slice(1:10)
scores %>%
dplyr::dense_rank(desc(Average))
slice(1:10)
scores %>%
dplyr::filter(1, 10, 11) %>%
dense_rank(desc(Average)) %>%
slice(1:10)
scores %>%
dplyr::dense_rank(desc(Average)) %>%
slice(1:10)
scores %>%
dplyr::dense_rank(desc(Average)) %>%
slice(1:10)
scores %>%
dplyr::group_by(grade) %>%
dplyr::summarise(Count = length(grade))
scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = Average)
scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
hist(temp$성별평균점수,
xlab="남",
col="yellow",
border="blue")
hist(temp$gender_mean,
xlab="남",
col="yellow",
border="blue")
scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
Math English Science Marketing Writing
scores %>%
dplyr::mutate(temp = Math+English+Science+Marketing+Writing/5)
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp))
scores <- scores %>%
dplyr::mutate(temp = Math+English+Science+Marketing+Writing/5)
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp))
scores %>%
dplyr::mutate(temp = Math+English+Science+Marketing+Writing/5) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp))
scores <- scores %>%
dplyr::mutate(temp = Math+English+Science+Marketing+Writing/5) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp))
# 히스토그램
hist(scores$gender_mean,
xlab="남",
col="yellow",
border="blue")
# 히스토그램
hist(scores$gender_mean,
xlab="남",
col="yellow",
border="blue")
# 히스토그램
hist(scores$gender_mean,
xlab="남",
col="yellow",
border="blue")
temp <- scores %>%
dplyr::mutate(temp_avg = (Math+English+Science+Marketing+Writing)/5) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp_avg))
temp <- scores %>%
dplyr::mutate(temp_avg = (Math+English+Science+Marketing+Writing)/5) %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(temp_avg))
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
scores %>%
dplyr::group_by(grade) %>%
dplyr::summarise(Count = length(grade))
View(scores)
scores <- data.frame(read.csv("class_scores.csv"))
scores
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
View(scores)
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
scores <- scores %>%
dplyr::mutate(Average = (Math+English+Science+Marketing+Writing)%/%5)
scores <- scores %>%
dplyr::mutate(Rank = dense_rank(desc(Average)))
View(scores)
temp <- scores %>%
dplyr::group_by(gender) %>%
dplyr::summarise(gender_mean = mean(Average))
hist(temp$gender_mean,
xlab="남",
col="yellow",
border="blue")
# 바차트
barplot(temp$gender_mean)
#파이차트
pie(
c(temp$gender_mean),
c("남", "여"),
col=c("blue", "red")
)
# 라인 차트
plot(c(temp$gender_mean), type="o")
# 바차트
barplot(temp$gender_mean)
#파이차트
pie(
c(temp$gender_mean),
c("남", "여"),
col=c("blue", "red")
)
# 라인 차트
plot(c(temp$gender_mean), type="o")
### RStudio 와 Oracle 연결
install.packages("rJava")
install.packages("DBI")
install.packages("RJDBC")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TAB")
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:xe",
"hr",
"hr")
drv <- JDBC(
"oracle.jdbc.driver.OracleDriver",
"C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
drv <- JDBC(
driverClass = "oracle.jdbc.driver.OracleDriver",
classPath = "C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:xe",
"hr",
"hr")
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TAB")
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TABS")
## 외부에서 접속해서 분석할 경우..
getwd()
conn <- dbConnect(drv,
"jdbc:oracle:thin:@192.168.0.54:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TABS")
conn <- dbConnect(drv,
"jdbc:oracle:thin:@192.168.0.54:1521:xe",
"hr",
"hr")
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TABS")
dbGetQuery(conn, "SELECT * FROM jobS")
dbGetQuery(conn, "SELECT tname FROM tab")
dbGetQuery(conn, "SELECT * FROM locations")
dbGetQuery(conn, "SELECT tname FROM tab")
dbGetQuery(conn, "SELECT * FROM employees")
employees <- data.frame(dbGetQuery(conn, "SELECT * FROM employees"))
employees
View(employees)
### install package
install.packages("data.table")
install.packages("dplyr")
install.packages("dplyr")
View(employees)
library(data.table)
library(dplyr)
tab <- dbGetQuery(conn, "SELECT * FROM TAB")
View(tab)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
library(rJava)
library(DBI)
library(RJDBC)
drv <- JDBC(
driverClass = "oracle.jdbc.driver.OracleDriver",
classPath = "C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM TABS")
View(tab)
View(tab)
tab <- dbGetQuery(conn, "SELECT * FROM TAB")
View(tab)
# $ --> list에서 하나 가져올 때
tname <- tab$TNAME
tname
tname
tname
tab
cnt <- data.frame(conn, "select * from countries")
cnt <- data.frame(dbGetQuery(conn, "select * from countries"))
View(cnt)
View(cnt)
dep <- data.frame(dbGetQuery(conn, "select * from DEPARTMENTS"))
View(dep)
emp <- data.frame(dbGetQuery(conn, "select * from EMPLOYEES"))
View(emp)
job <- data.frame(dbGetQuery(conn, "select * from JOBS"))
View(job)
jobh <- data.frame(dbGetQuery(conn, "select * from JOB_HISTORY"))
View(jobh
jobh <- data.frame(dbGetQuery(conn, "select * from JOB_HISTORY"))
View(jobh)
loc <- data.frame(dbGetQuery(conn, "select * from LOCATIONS"))
View(loc)
reg <- data.frame(dbGetQuery(conn, "select * from REGIONS"))
View(reg)
cnt <- data.frame(dbGetQuery(conn, "select * from COUNTRIES"))
View(cnt)
emp %>%
select(everything())
emp <- emp %>%
mutate(Name = "FIRST_NAME LAST_NAME"))
emp <- emp %>%
mutate(Name = "FIRST_NAME LAST_NAME")
View(emp)
emp <- emp %>%
mutate(Name = cat(emp$FIRST_NAME, ,emp$LAST_NAME))
emp <- emp %>%
mutate(Name = cat(emp$FIRST_NAME,' ',emp$LAST_NAME))
View(emp)
emp <- emp %>%
mutate(Name = emp$FIRST_NAME+' '+emp$LAST_NAME)
emp <- emp %>%
mutate(Name = paste(emp$FIRST_NAME,' ',emp$LAST_NAME))
View(emp)
emp <- emp %>%
mutate(MONTH_SAL = emp$SALARY/12)
View(emp)
emp %>%
filter(emp$SALARY >= 20000) %>%
select(emp$Name, emp$EMPLOYEE_ID, emp$SALARY)
View(emp)
emp %>%
filter(emp$SALARY >= 20000) %>%
select(Name, EMPLOYEE_ID, SALARY)
emp %>%
filter(SALARY >= 20000) %>%
select(Name, EMPLOYEE_ID, SALARY)
emp %>%
filter(SALARY >= 20000) %>%
select(emp$Name, emp$EMPLOYEE_ID, emp$SALARY)
emp %>%
filter(SALARY >= 20000) %>%
select(Name, EMPLOYEE_ID, SALARY)
emp %>%
filter(emp$SALARY >= 20000) %>%
select(Name, EMPLOYEE_ID, SALARY)
emp %>%
filter(emp$SALARY <= 7000) %>%
select(Name, EMPLOYEE_ID, SALARY)
emp %>%
select(contains('e') | contains('o'))
emp %>%
filter(emp$LAST_NAME == contains('e') | emp$LAST_NAME == contains('o'))
emp %>%
select(emp$LAST_NAME == contains('e') | emp$LAST_NAME == contains('o'))
emp %>%
select(LAST_NAME == contains('e') | LAST_NAME == contains('o'))
emp %>%
select(contains(match = emp$LAST_NAME, 'e') | contains(match = emp$LAST_NAME, 'o'))
emp %>%
select(contains(emp$LAST_NAME, 'e') | contains(emp$LAST_NAME, 'o'))
emp %>%
select(contains(LAST_NAME, 'e') | contains(LAST_NAME, 'o'))
emp %>%
filter(contains(LAST_NAME, 'e') | contains(LAST_NAME, 'o'))
emp %>%
select(LAST_NAME) %>%
filter(contains(LAST_NAME, 'e') | contains(LAST_NAME, 'o'))
emp %>%
select(LAST_NAME) %>%
filter(contains(emp$LAST_NAME, 'e') | contains(emp$LAST_NAME, 'o'))
emp %>%
select(LAST_NAME)
emp %>%
filter(grep('e',emp$LAST_NAME) | grep('o',emp$LAST_NAME))
scores %>%
dplyr::select(contains('e')) %>%
slice(1:10)
View(jobh)
emp %>%
filter(grep("e",emp$LAST_NAME) | grep("o",emp$LAST_NAME))
emp %>%
filter(grep("e",emp$LAST_NAME))
emp %>%
filter(grep("e",emp$LAST_NAME) | grep("o",emp$LAST_NAME)) %>%
select(everything())
ceo_sal <- apply(emp %>%
select(SALARY), 2, max)
source('C:/Users/Administrator/rlangweekend/Project180721/ConnOracleDemo.R', encoding = 'UTF-8', echo=TRUE)
install.packages("dplyr")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
ceo_sal <- apply(emp %>%
select(SALARY), 2, max)
library(rJava)
library(DBI)
library(RJDBC)
library(data.table)
library(dplyr)
emp <- data.frame(dbGetQuery(conn, "select * from EMPLOYEES"))
View(emp)
drv <- JDBC(
driverClass = "oracle.jdbc.driver.OracleDriver",
classPath = "C:\\oraclexe\\app\\oracle\\product\\11.2.0\\server\\jdbc\\lib\\ojdbc6.jar"
)
conn <- dbConnect(drv,
"jdbc:oracle:thin:@localhost:1521:xe",
"hr",
"hr")
dbGetQuery(conn, "SELECT * FROM employees")
emp <- data.frame(dbGetQuery(conn, "select * from EMPLOYEES"))
View(emp)
ceo_sal <- apply(emp %>%
select(SALARY), 2, max)
ceo_sal
emp <- emp %>%
mutate(Name = paste(emp$FIRST_NAME,' ',emp$LAST_NAME))
emp <- emp %>%
mutate(MONTH_SAL = emp$SALARY/12)
emp %>%
filter(SALARY == ceo_sal) %>%
select(emp$Name)
emp %>%
filter(SALARY == ceo_sal) %>%
select(Name)
last_name <- apply(emp %>%
select(last_name, 2, contains('e'), contains('o')))
last_name <- apply(emp %>%
select(last_name) %>%
select(contains('e') | contains('o')), 2)
last_name <- apply(emp %>%
select(last_name), 2, select(contains('e') | contains('o')))
last_name <- apply(emp %>%
select(last_name), 2, contains('e' | 'o'))
last_name <- apply(emp %>%
select(last_name), 2, contains('e'))
last_name <- apply(emp %>%
select(LAST_NAME), 2, select(contains('e') | contains('o'))
last_name <- apply(emp %>%
select(LAST_NAME), 2, select(contains('e') | contains('o')))
last_name <- apply(emp %>%
select(LAST_NAME), 2, select(contains('e') | contains('o')))
last_name <- apply(emp %>%
select(LAST_NAME), 2, select(contains('e')))
last_name <- apply(emp %>%
select(LAST_NAME), 2, contains('e'))
getCharE <- function(df) {
grep('e', df)
}
getCharO <- function(df) {
grep('o', df)
}
last_name_e <- apply(emp %>%
select(LAST_NAME), 2, getCharE)
last_name_o <- apply(emp %>%
select(LAST_NAME), 2, getCharO)
emp %>%
filter(LAST_NAME == last_name_o | LAST_NAME == last_name_e)
last_name_e
emp %>%
filter(row_number(last_name_e) | row_number(last_name_o))
emp %>%
filter(row_number(last_name_e) | row_number(last_name_o))
last_name_o
last_name_e
getCharE <- function(df) {
return(grep('e', df))
}
getCharO <- function(df) {
return(grep('o', df))
}
last_name_e <- apply(emp %>%
select(LAST_NAME), 2, getCharE)
last_name_e
last_name_o <- apply(emp %>%
select(LAST_NAME), 2, getCharO)
last_name_o
emp %>%
mutate(row_number(everything())) %>%
filter(row_number(last_name_e) | row_number(last_name_o))
emp %>%
filter(emp$LAST_NAME) %in% c('o', 'e'))
emp %>%
filter(emp$LAST_NAME %in% c('o', 'e'))
emp %>%
mutate(rowNum = row_number()) %>%
filter(row_number(last_name_e) | row_number(last_name_o))
emp %>%
mutate(rowNum = row_number(desc)) %>%
filter(row_number(last_name_e) | row_number(last_name_o))
emp %>%
mutate(rowNum = row_number(emp)) %>%
filter(row_number(last_name_e) | row_number(last_name_o))
getCharE <- function(df) {
return(df[grep('e', df)])
}
getCharO <- function(df) {
return(df[grep('o', df)])
}
last_name_e <- apply(emp %>%
select(LAST_NAME), 2, getCharE)
last_name_o <- apply(emp %>%
select(LAST_NAME), 2, getCharO)
last_name_e
emp %>%
filter(row_number(last_name_e) | row_number(last_name_o))
emp %>%
filter(emp$LAST_NAME == last_name_e | emp$LAST_NAME ==last_name_o)
emp %>%
filter(emp$LAST_NAME %in% last_name_e | emp$LAST_NAME %in% last_name_o)
emp %>%
filter(emp$LAST_NAME %in% last_name_e | emp$LAST_NAME %in% last_name_o) %>%
select(LAST_NAME)
